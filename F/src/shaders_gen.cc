// progress.frag
"#define ITER_FULL 64\n#define ITER_REFLECT 32\n#define ITER_SHADOW 20\nuniform float percent;uniform float ratio;uniform vec2 invResolution;struct C_Ray{vec3 vOrigin;vec3 vDir;};struct C_HitInfo{float fDistance;float fObjectId;vec3 vPos;};struct C_Material{vec3 cAlbedo;float fR0;float fSmoothness;};vec2 Union(vec2 v1,vec2 v2){return mix(v1,v2,step(v2.x,v1.x));}float PI=3.141592654;vec3 rotateX(vec3 v,float x){return vec3(v.x,v.y*cos(x)-v.z*sin(x),v.y*sin(x)+v.z*cos(x));}vec3 rotateY(vec3 v,float x){return vec3(v.x*cos(x)-v.z*sin(x),v.y,v.x*sin(x)+v.z*cos(x));}vec3 rotateZ(vec3 v,float x){return vec3(v.x*cos(x)-v.y*sin(x),v.x*sin(x)+v.y*cos(x),v.z);}vec3 DomainRepeatXZGetTile(vec3 vPos,vec2 vRepeat,out vec2 vTile){vec3 vResult=vPos;vec2 vTilePos=(vPos.xz/vRepeat)+0.5;vTile=floor(vTilePos+1000.0);vResult.xz=(fract(vTilePos)-0.5)*vRepeat;return vResult;}vec3 DomainRepeatY(vec3 vPos,float fSize){vec3 vResult=vPos;vResult.y=(fract(vPos.y/fSize+0.5)-0.5)*fSize;return vResult;}float GetDistanceSphere(vec3 p,float r){return length(p)-r;}float GetDistanceCylinderY(vec3 p,float r){return length(p.xz)-r;}float GetDistanceCylinderY(vec3 p,float r,float h){return max(GetDistanceCylinderY(p,r),abs(p.y)-h);}float GetDistancePasDeVis(vec3 p,float r){return length(p.xz)-r*(1.+0.2*abs(fract(r*300.*p.y-atan(p.x,p.z)/(2.*PI))-0.5));}float GetDistancePoutreZ(vec3 p,float l,float h){return max(abs(p.x)-l,abs(p.y)-h);}float GetDistanceBox(vec3 p,vec3 size){return max(GetDistancePoutreZ(p,size.x,size.y),abs(p.z)-size.z);}float GetDistanceHexaPrism(vec3 p,float l,float h){float d=GetDistancePoutreZ(p,l,h);d=max(d,GetDistancePoutreZ(rotateY(p,PI/3.),l,h));return max(d,GetDistancePoutreZ(rotateY(p,2.*PI/3.),l,h));}float GetDistanceEcrouHead(vec3 p,float size){return GetDistanceHexaPrism(p,size,0.4*size);}float GetDistanceEcrou(vec3 p,float size){return max(GetDistanceEcrouHead(p,size),-GetDistancePasDeVis(p,0.45*size));}float GetDistanceVis(vec3 p,float size,float l){return min(GetDistanceEcrouHead(p,size),max(GetDistancePasDeVis(p,0.45*size),max(-p.y,p.y-l)));}float GetDistanceRondelle(vec3 p,float r){return max(GetDistanceCylinderY(p,r,0.05*r),-GetDistanceCylinderY(p,0.6*r,r));}float GetDistanceObject(vec3 vPos,float object){float choose=3.*fract(object/3.);if(choose>2.)return GetDistanceEcrou(vPos,0.2);if(choose>1.)return GetDistanceVis(vPos,0.2,0.6);return GetDistanceRondelle(vPos,0.25);}float GetDistanceLine(vec3 vPos){vec3 p=vPos;p.xz=fract(p.xz-1000.)-vec2(0.5);float d=GetDistanceObject(p,vPos.x);return d;}vec2 GetDistanceScene(vec3 vPos){vec2 vDistFloor=vec2(vPos.y,1.);vec2 vDistChain=vec2(GetDistanceLine(vPos),2.);return Union(vDistFloor,vDistChain);}void Raymarch(C_Ray ray,out C_HitInfo result,float maxDist,int maxIter){float fEpsilon=0.0001;float fStartDistance=0.001;result.fDistance=fStartDistance;result.fObjectId=0.0;for(int i=0;i<maxIter;i++){result.vPos=ray.vOrigin+ray.vDir*result.fDistance;vec2 vSceneDist=GetDistanceScene(result.vPos);result.fObjectId=vSceneDist.y;if((vSceneDist.x<=fEpsilon)||(result.fDistance>=maxDist)){break;}result.fDistance=result.fDistance+vSceneDist.x;}if(result.fDistance>=maxDist){result.fObjectId=0.0;result.fDistance=1000.0;}}vec3 GetLightPos(){float pct=min(percent,1.);return vec3(sin(pct),2.,cos(pct));}vec3 GetLightCol(){return 10.*vec3(1.0,0.88,0.75);}vec3 GetSkyGradient(vec3 vDir){float fBlend=clamp(vDir.y,0.0,1.0);return mix(vec3(1.,0.94,0.8),vec3(1.,0.88,0.75),fBlend);}vec3 GetAmbientLight(vec3 vNormal){return GetSkyGradient(vNormal);}float GetDiffuseIntensity(vec3 vLightDir,vec3 vNormal){return max(0.0,dot(vLightDir,vNormal));}float GetBlinnPhongIntensity(C_Ray ray,C_Material mat,vec3 vLightDir,vec3 vNormal){vec3 vHalf=normalize(vLightDir-ray.vDir);float fNdotH=max(0.0,dot(vHalf,vNormal));float fSpecPower=exp2(4.0+6.0*mat.fSmoothness);float fSpecIntensity=(fSpecPower+2.0)*0.125;return pow(fNdotH,fSpecPower)*fSpecIntensity;}float Schlick(vec3 vNormal,vec3 vView,float fR0,float fSmoothFactor){float fDot=dot(vNormal,-vView);fDot=min(max((1.0-fDot),0.0),1.0);float fDot2=fDot*fDot;float fDot5=fDot2*fDot2*fDot;return fR0+(1.0-fR0)*fDot5*fSmoothFactor;}float GetAmbientOcclusion(C_Ray ray,C_HitInfo intersection,vec3 vNormal){vec3 vPos=intersection.vPos;float fAmbientOcclusion=1.0;float fDist=0.0;for(int i=0;i<=2;i++){fDist+=0.1;vec2 vSceneDist=GetDistanceScene(vPos+vNormal*fDist);fAmbientOcclusion*=1.0-max(0.0,(fDist-vSceneDist.x)*0.2/fDist);}return fAmbientOcclusion;}vec3 GetObjectLighting(C_Ray ray,C_HitInfo intersection,C_Material material,vec3 vNormal,vec3 cReflection){vec3 cScene;vec3 vLightPos=GetLightPos();vec3 vToLight=vLightPos-intersection.vPos;vec3 vLightDir=normalize(vToLight);float fLightDistance=length(vToLight);float fAttenuation=1.0/(fLightDistance*fLightDistance);float fShadowBias=0.1;float fShadowFactor=1.;vec3 vIncidentLight=GetLightCol()*fShadowFactor*fAttenuation;vec3 vDiffuseLight=GetDiffuseIntensity(vLightDir,vNormal)*vIncidentLight;float fAmbientOcclusion=GetAmbientOcclusion(ray,intersection,vNormal);vec3 vAmbientLight=GetAmbientLight(vNormal)*fAmbientOcclusion;vec3 vDiffuseReflection=material.cAlbedo*(vDiffuseLight+vAmbientLight);vec3 vSpecularReflection=cReflection*fAmbientOcclusion;vSpecularReflection+=GetBlinnPhongIntensity(ray,material,vLightDir,vNormal)*vIncidentLight;float fFresnel=Schlick(vNormal,ray.vDir,material.fR0,material.fSmoothness*0.9+0.1);cScene=mix(vDiffuseReflection,vSpecularReflection,fFresnel);return cScene;}void ApplyAtmosphere(inout vec3 col,C_Ray ray,C_HitInfo intersection){float fFogDensity=0.025;float fFogAmount=exp(intersection.fDistance*-fFogDensity);vec3 cFog=GetSkyGradient(ray.vDir);col=mix(cFog,col,fFogAmount);vec3 vToLight=GetLightPos()-ray.vOrigin;float fDot=dot(vToLight,ray.vDir);fDot=clamp(fDot,0.0,intersection.fDistance);vec3 vClosestPoint=ray.vOrigin+ray.vDir*fDot;float fDist=length(vClosestPoint-GetLightPos());}vec3 floorColor(vec3 pos,out vec2 spe){float x=mod(0.947*(sin(0.05*pos.x)+sin(0.8*pos.z))+0.05*(sin(1.3*pos.x+0.3)+sin(pos.z+0.7))+0.003*(sin(10.*pos.x+0.5)+sin(11.*pos.z+0.1)),0.1)*10.;vec3 c1=vec3(164./255.,133./255.,107./255.);vec3 c2=vec3(211./255.,178./255.,139./255.);return mix(c1,c2,x);}C_Material GetObjectMaterial(in float fObjId,in vec3 vPos){C_Material mat;if(fObjId<1.5){mat.fR0=0.02;mat.fSmoothness=0.2;vec2 foo;mat.cAlbedo=floorColor(vPos,foo);}else{mat.fR0=0.5;mat.fSmoothness=0.3;mat.cAlbedo=vec3(0.3,0.3,0.3);}return mat;}vec3 GetSceneNormal(vec3 vPos){float fDelta=0.005;vec3 vOffset1=vec3(fDelta,-fDelta,-fDelta);vec3 vOffset2=vec3(-fDelta,-fDelta,fDelta);vec3 vOffset3=vec3(-fDelta,fDelta,-fDelta);vec3 vOffset4=vec3(fDelta,fDelta,fDelta);float f1=GetDistanceScene(vPos+vOffset1).x;float f2=GetDistanceScene(vPos+vOffset2).x;float f3=GetDistanceScene(vPos+vOffset3).x;float f4=GetDistanceScene(vPos+vOffset4).x;vec3 vNormal=vOffset1*f1+vOffset2*f2+vOffset3*f3+vOffset4*f4;return normalize(vNormal);}vec3 GetSceneColourSimple(C_Ray ray){C_HitInfo intersection;Raymarch(ray,intersection,5.,ITER_REFLECT);vec3 cScene;if(intersection.fObjectId<0.5){cScene=GetSkyGradient(ray.vDir);}else{C_Material material=GetObjectMaterial(intersection.fObjectId,intersection.vPos);vec3 vNormal=GetSceneNormal(intersection.vPos);vec3 cReflection=GetSkyGradient(reflect(ray.vDir,vNormal));cScene=GetObjectLighting(ray,intersection,material,vNormal,cReflection);}ApplyAtmosphere(cScene,ray,intersection);return cScene;}vec3 GetSceneColour(C_Ray ray){C_HitInfo intersection;Raymarch(ray,intersection,15.0,ITER_FULL);vec3 cScene;if(intersection.fObjectId<0.5){cScene=GetSkyGradient(ray.vDir);}else{C_Material material=GetObjectMaterial(intersection.fObjectId,intersection.vPos);vec3 vNormal=GetSceneNormal(intersection.vPos);vec3 cReflection;{float fSepration=0.05;C_Ray reflectRay;reflectRay.vDir=reflect(ray.vDir,vNormal);reflectRay.vOrigin=intersection.vPos+reflectRay.vDir*fSepration;cReflection=GetSceneColourSimple(reflectRay);}cScene=GetObjectLighting(ray,intersection,material,vNormal,cReflection);}ApplyAtmosphere(cScene,ray,intersection);return cScene;}void GetCameraRay(vec3 vPos,vec3 vForwards,vec3 vWorldUp,out C_Ray ray){vec2 vUV=gl_FragCoord.xy*invResolution;vec2 vViewCoord=0.5*(vUV*2.0-1.0);vViewCoord.y/=ratio;ray.vOrigin=vPos;vec3 vRight=normalize(cross(vForwards,vWorldUp));vec3 vUp=cross(vRight,vForwards);ray.vDir=normalize(vRight*vViewCoord.x+vUp*vViewCoord.y+vForwards);}void GetCameraRayLookat(vec3 vPos,vec3 vInterest,out C_Ray ray){vec3 vForwards=normalize(vInterest-vPos);vec3 vUp=vec3(0.0,1.0,0.0);GetCameraRay(vPos,vForwards,vUp,ray);}vec3 OrbitPoint(float fHeading,float fElevation){return vec3(sin(fHeading)*cos(fElevation),sin(fElevation),cos(fHeading)*cos(fElevation));}vec3 Tonemap(vec3 cCol){return cCol/(1.0+cCol);}vec4 progress(vec2 uv,float percent){float marginLeft=0.3;float distCent=0.5-marginLeft;vec2 p=uv-vec2(0.5,0.5);float barre=float(abs(p.x)<distCent&&abs(p.y)<0.03);float left=mix(marginLeft,1.-marginLeft,min(percent,1.));return vec4(vec3(step(uv.x,left)),0.25*barre);}void main(){C_Ray ray;GetCameraRayLookat(vec3(-1.3,4.0,-5.0),vec3(0.),ray);vec3 cScene=GetSceneColour(ray);float fExposure=1.2;vec3 color=Tonemap(cScene*fExposure);vec2 vUV=gl_FragCoord.xy*invResolution;vec4 circ=progress(vUV,percent);color=mix(color,circ.xyz,circ.a);color*=smoothstep(1.,0.,max(0.,percent-1.));gl_FragColor=vec4(color,1.);}",
// progress.vert
"void main(){gl_Position=ftransform();}",
// stdlib.vert
"uniform mat4 oldModelView;uniform float zNear;uniform float zFar;attribute vec3 vTan;varying vec3 vSpeed;varying vec4 shadowCoord;float getFogFactor(vec3 vVertex){gl_FogFragCoord=length(vVertex)/zFar;return clamp(exp2(gl_Fog.density*gl_Fog.density*gl_FogFragCoord*gl_FogFragCoord*-1.442695),0.,1.);}vec3 getLightGlobal(int i,vec3 vVertex){return(gl_LightSource[i].position.xyz-vVertex*gl_LightSource[i].position.w);}vec3 getLightTangent(int i,vec3 vVertex,mat3 tanSpace){return(gl_LightSource[i].position.xyz-vVertex*gl_LightSource[i].position.w)*tanSpace;}vec3 getSpeed(){vec4 oldScreenCoord=gl_ProjectionMatrix*oldModelView*gl_Vertex;vec4 newScreenCoord=gl_ProjectionMatrix*gl_ModelViewMatrix*gl_Vertex;return vec3(newScreenCoord.xy-oldScreenCoord.xy,newScreenCoord.w);}void computeShadowCoord(){shadowCoord=gl_TextureMatrix[4]*gl_Vertex;}mat3 computeTBN(){vec3 vNormal=normalize(gl_NormalMatrix*gl_Normal);vec3 vTangent=normalize(gl_NormalMatrix*vTan);vec3 vBinormal=cross(vNormal,vTangent);return mat3(vTangent,vBinormal,vNormal);}",
// stdlib.frag
"uniform sampler2D nMap;uniform float zNear;uniform float zFar;vec2 vTexCoord;vec3 nViewVec;float getDepth(vec2 uv){float z=texture2D(nMap,uv).x;return(2.0*zNear)/(zNear+mix(zFar,zNear,z));}vec3 getNormal_no_bump(){return vec3(0.,0.,1.);}vec3 getNormal(){return normalize(texture2D(nMap,vTexCoord).xyz*2.-1.);}vec3 getSpeedColor(vec3 speed){float norm=length(speed.xy/speed.z);return vec3(0.5+0.5*normalize(speed.xy/speed.z),pow(norm,0.5));}vec2 getTexCoord_no_bump(){return gl_TexCoord[0].st/gl_TexCoord[0].q;}vec2 getTexCoord(){vec2 uv=gl_TexCoord[0].st/gl_TexCoord[0].q;float height=texture2D(nMap,uv).a;vec2 vOffset=0.03*height*nViewVec.xy;return uv+0.25*vOffset;}vec4 addFog(vec4 color,float intensity){return vec4(mix(gl_Fog.color,color,intensity).xyz,color.a);}",
// lightFunctions.frag
"uniform sampler2D mMap;uniform sampler2D sMap;uniform float shininess;uniform int time;varying vec4 shadowCoord;vec2 vTexCoord;vec3 nNormal;vec3 nTangent;vec3 nViewVec;vec4 getAmbientColor(int i){return gl_LightSource[i].ambient;}vec4 getDiffuseColor(int i){return gl_LightSource[i].diffuse;}vec4 getSpecularColor(int i){return gl_LightSource[i].specular;}float getDiffuseIntensity(vec3 nLight){return clamp(dot(nLight,nNormal),0.,1.);}float getAnisotropicDiffuseIntensity(vec3 nLight){float LT=dot(nLight,nTangent);return sqrt(1.-LT*LT);}float getSpecularIntensity(vec3 nLight,float lightAttenuation){vec3 vHalfVec=0.5*(nViewVec+nLight);float specular=pow(clamp(dot(normalize(vHalfVec),nNormal),0.,1.),shininess)*(shininess+4.)/8.*lightAttenuation*texture2D(mMap,vTexCoord).a;return 0.2*specular;}float getAnisotropicSpecularIntensity(vec3 nLight,float lightAttenuation){vec3 vHalfVec=0.5*(nViewVec+nLight);float LT=dot(nLight,nTangent);float VT=dot(nViewVec,nTangent);float specular=pow(max(0.,sqrt(1.-LT*LT)*sqrt(1.-VT*VT)-LT*VT),shininess)*lightAttenuation*(2.+shininess);return 0.023*specular;}float getDistanceAttenuation(int i,vec3 vLight){float dist=length(vLight);return clamp(1.-gl_LightSource[i].linearAttenuation*dist,0.,1.);}float getShadowAttenuation(){vec3 coord=shadowCoord.xyz/shadowCoord.w;if(shadowCoord.w>0.&&coord.xy==clamp(coord.xy,0.,1.)){float falloff=clamp(20.*(0.95-2.*length(coord.xy-vec2(0.5))),0.,1.);float shadowDist=texture2D(sMap,coord.xy).x;return float(shadowDist>=coord.z)*falloff;}return 0.;}float linstep(float vmin,float vmax,float v){return clamp((v-vmin)/(vmax-vmin),0.,1.);}float ChebyshevUpperBound(vec2 moments,float t){float p=float(t<=moments.x);float minVariance=0.000001;float variance=max(moments.y-(moments.x*moments.x),minVariance);float d=t-moments.x;float pmax=linstep(0.3,1.,variance/(variance+d*d));return max(p,pmax);}float getVSMAttenuation(){if(time<6000)return 1.;vec3 coord=shadowCoord.xyz/shadowCoord.w;if(shadowCoord.w>0.&&coord.xy==clamp(coord.xy,0.,1.)){float falloff=clamp(20.*(0.95-2.*length(coord.xy-vec2(0.5))),0.,1.);vec2 moments=texture2D(sMap,coord.xy).xy;return ChebyshevUpperBound(moments,coord.z)*falloff;}return 0.;}",
// blur.frag
"#version 120\nuniform float offset[5]=float[5](0.,1.,2.,3.,4.);uniform float weight[5]=float[5](0.2270270270,0.1945945946,0.1216216216,0.0540540541,0.0162162162);uniform vec2 center;const float glowCoef=0.4;vec4 verticalGaussianBlur(sampler2D tex,vec2 uv,float intensity){vec4 c=texture2D(tex,uv)*weight[0];vec2 offs=vec2(0.);for(int i=1;i<5;++i){offs.y=intensity*offset[i];c+=texture2D(tex,uv+offs)*weight[i];c+=texture2D(tex,uv-offs)*weight[i];}return c;}vec4 horizontalGaussianBlur(sampler2D tex,vec2 uv,float intensity){vec4 c=texture2D(tex,uv)*weight[0];vec2 offs=vec2(0.);for(int i=1;i<5;++i){offs.x=intensity*offset[i];c+=texture2D(tex,uv+offs)*weight[i];c+=texture2D(tex,uv-offs)*weight[i];}return c;}vec4 verticalGlow(sampler2D tex,vec2 uv,float intensity){vec4 c;vec4 sum=vec4(0.);vec2 offs=vec2(0.);for(int i=1;i<5;++i){offs.y=intensity*offset[i];c=texture2D(tex,uv+offs);sum+=c*weight[i]*(1.-c.a);c=texture2D(tex,uv-offs);sum+=c*weight[i]*(1.-c.a);}c=texture2D(tex,uv);sum*=glowCoef;return vec4((c+sum).rgb,c.a-sum.a);}vec4 horizontalGlow(sampler2D tex,vec2 uv,float intensity){vec4 c;vec4 sum=vec4(0.);vec2 offs=vec2(0.);for(int i=1;i<5;++i){offs.x=intensity*offset[i];c=texture2D(tex,uv+offs);sum+=c*weight[i]*(1.-c.a);c=texture2D(tex,uv-offs);sum+=c*weight[i]*(1.-c.a);}c=texture2D(tex,uv);sum*=glowCoef;return vec4((c+sum).rgb,c.a-sum.a);}vec4 motionBlur(sampler2D tex,sampler2D motion,vec2 uv,float intensity){vec3 speedInfo=texture2D(motion,uv).rgb;vec2 speed=(2.*speedInfo.xy-1.)*pow(speedInfo.z,2.);vec2 offset=intensity*speed;vec3 c=vec3(0.);float inc=0.2;float weight=0.;for(float i=-1.;i<=1.;i+=inc){c+=texture2D(tex,clamp(uv+i*offset,vec2(0.),vec2(1.,center.y/center.x))).rgb;weight+=1.;}c/=weight;return vec4(c,texture2D(tex,uv).a);}",
// postEffects.frag
"uniform sampler2D mMap;uniform sampler2D sMap;uniform int time;uniform float glowness;uniform vec2 invResolution;uniform vec2 center;float rand(vec2 v){return fract(sin(dot(v,vec2(12.9898,78.233)))*43758.5453);}vec3 rand(vec3 v){float seed=dot(v.xyz,v.yzx);return fract(43758.5453*sin(seed*vec3(12.9898,78.233,91.2228)));}float getGrain(vec2 uv,int t,int period){vec2 coord=uv;coord.y*=invResolution.x/invResolution.y;coord+=rand(vec3(float(t/period),1.,1.)).xy;return texture2D(sMap,coord).a;}vec4 grain(vec2 uv,vec4 color,int period,float freq,float intensity){float grain1=getGrain(uv*freq,time,period);float grain2=getGrain(uv*freq,time+period,period);float perc=mod(float(time),float(period))/float(period);float grain=2.*mix(grain1,grain2,perc)-1.;return vec4(color.rgb+grain*intensity,color.a);}vec4 addVignetting(vec4 color,vec2 uv){vec2 coord=uv-center;coord.y*=invResolution.x/invResolution.y;float d=1.77*length(coord);float cos4=1./pow(1.+d*d/8.,2.);return vec4(cos4*color.rgb,color.a);}vec4 addBorder(vec4 color,vec2 uv,float thickness){float hThickness=thickness;float vThickness=hThickness*invResolution.y/invResolution.x;float coeff=(smoothstep(0.,hThickness,uv.x)*smoothstep(1.,1.-hThickness,uv.x)*smoothstep(0.,vThickness,uv.y)*smoothstep(1.,1.-vThickness,uv.y));coeff=pow(coeff,0.4);return vec4(coeff*color.rgb,color.a);}vec4 combineGlow(vec4 color,vec2 uv){vec4 glow=texture2D(mMap,uv);return color+glow*glowness*pow(1.-glow.a,1.75);}vec4 filter(vec4 color,vec3 low,vec3 hig,vec3 gamma){return vec4(pow(clamp(mix(low,hig,color.rgb),0.,1.),gamma),color.a);}",
// minimal.vert
"varying vec3 vSpeed;varying float fogFactor;float getFogFactor(vec3 vVertex);vec3 getSpeed();void main(){vec3 vVertex=(gl_ModelViewMatrix*gl_Vertex).xyz;fogFactor=getFogFactor(vVertex);gl_TexCoord[0]=gl_MultiTexCoord0;gl_Position=ftransform();vSpeed=getSpeed();}",
// createVSM.vert
"varying vec4 position;void main(){gl_Position=ftransform();position=gl_Position;}",
// createVSM.frag
"varying vec4 position;vec2 getMoments(float depth){vec2 moments;moments.x=depth;float dx=dFdx(depth);float dy=dFdy(depth);moments.y=depth*depth+0.25*(dx*dx+dy*dy);return moments;}void main(){float depth=position.z/position.w;depth=depth*0.5+0.5;gl_FragColor=vec4(getMoments(depth),0.,1.);}",
// bump.vert
"uniform int id;uniform int time;uniform float trans;varying vec3 vViewVec;varying vec3 vLight0;varying vec3 vLight1;varying vec3 vSpeed;varying float fogFactor;varying vec3 vvPos;mat3 computeTBN();float getFogFactor(vec3 vVertex);vec3 getLightTangent(int i,vec3 vVertex,mat3 tanSpace);vec3 getSpeed();void computeShadowCoord();void main(){gl_TexCoord[0]=gl_MultiTexCoord0;mat3 tanSpace=computeTBN();vec3 vVertex=(gl_ModelViewMatrix*gl_Vertex).xyz;vvPos=gl_Vertex.xyz;computeShadowCoord();vLight0=getLightTangent(0,vVertex,tanSpace);vLight1=getLightTangent(1,vVertex,tanSpace);vViewVec=-vVertex*tanSpace;fogFactor=getFogFactor(vVertex);gl_TexCoord[1]=vec4(vec2(0.5,0.25+0.5*float(id>2))+2.*gl_Vertex.xz/vec2(500,600),0.,1.);gl_Position=ftransform();vSpeed=getSpeed();}",
// bump.frag
"varying vec3 vViewVec;varying vec3 vSpeed;varying float fogFactor;vec2 getTexCoord();vec3 getNormal();vec2 vTexCoord;vec3 nNormal;vec3 nViewVec;vec4 getBump();vec4 addFog(vec4 color,float intensity);vec3 getSpeedColor(vec3 speed);void main(){nViewVec=normalize(vViewVec);vTexCoord=getTexCoord();nNormal=getNormal();vec4 color=getBump();color=addFog(color,fogFactor);gl_FragData[0]=color;gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// lousianne.vert
"uniform int id;uniform int time;uniform float trans;varying vec3 vViewVec;varying vec3 vLight0;varying vec3 vLight1;varying vec3 vSpeed;varying float fogFactor;mat3 computeTBN();float getFogFactor(vec3 vVertex);vec3 getLightTangent(int i,vec3 vVertex,mat3 tanSpace);vec3 getSpeed();void computeShadowCoord();void main(){gl_TexCoord[0]=gl_MultiTexCoord0;vec4 vertex=gl_Vertex;vertex.y*=1.+trans;mat3 tanSpace=computeTBN();vec3 vVertex=(gl_ModelViewMatrix*vertex).xyz;computeShadowCoord();vLight0=getLightTangent(0,vVertex,tanSpace);vLight1=getLightTangent(1,vVertex,tanSpace);vViewVec=-vVertex*tanSpace;fogFactor=getFogFactor(vVertex);gl_TexCoord[1]=vec4(vec2(0.5,0.25+0.5*float(id>2))+2.*vertex.xz/vec2(500.,600.),0.,1.);gl_Position=gl_ModelViewProjectionMatrix*vertex;vSpeed=getSpeed();}",
// syncTest.frag
"varying vec3 vSpeed;varying float fogFactor;vec2 vTexCoord;vec3 nNormal;vec2 getTexCoord();vec3 getNormal();vec4 getBump();vec4 addFog(vec4 color,float intensity);vec3 getSpeedColor(vec3 speed);uniform float trans;void main(void){vTexCoord=getTexCoord();nNormal=getNormal();vec4 color=getBump();color=addFog(color,fogFactor);gl_FragData[0]=vec4(trans,0.,0.,1.-trans);gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// lightSource.frag
"varying vec3 vSpeed;varying float fogFactor;vec2 vTexCoord;vec2 getTexCoord_no_bump();vec4 getAlbedo_tex();vec3 getSpeedColor(vec3 speed);vec4 addFog(vec4 color,float intensity);void main(){vTexCoord=getTexCoord_no_bump();vec4 color=getAlbedo_tex();color=addFog(color,fogFactor);gl_FragData[0]=color;gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// anisotropic.frag
"uniform float shininess;uniform float trans;varying vec3 vLight0;varying vec3 vLight1;varying vec3 vViewVec;varying vec3 vSpeed;varying float fogFactor;vec2 vTexCoord;vec3 nNormal;vec3 nTangent;vec3 nViewVec;vec2 getTexCoord();vec3 getNormal();vec4 getAlbedo_tex();vec4 getAmbientColor(int i);vec4 getDiffuseColor(int i);vec4 getSpecularColor(int i);vec3 getSpeedColor(vec3 speed);float getDiffuseIntensity(vec3 nLight);float getAnisotropicSpecularIntensity(vec3 nLight,float lightAttenuation);float getDistanceAttenuation(int i,vec3 vLight);float getVSMAttenuation();vec4 addFog(vec4 color,float intensity);void main(){nViewVec=normalize(vViewVec);vTexCoord=getTexCoord();nNormal=getNormal();nTangent=vec3(1.,0.,0.);vec4 albedo=getAlbedo_tex();vec3 nLight0=normalize(vLight0);vec3 nLight1=normalize(vLight1);float lightAttenuation=min(getVSMAttenuation(),getDistanceAttenuation(0,vLight0));float diffuseIntensity0=0.5*lightAttenuation*getDiffuseIntensity(nLight0);float diffuseIntensity1=0.5*getDiffuseIntensity(nLight1);vec4 ambientComponent=vec4(vec3(0.05),1.);vec4 diffuseComponent0=diffuseIntensity0*getDiffuseColor(0);vec4 diffuseComponent1=diffuseIntensity1*getDiffuseColor(1);float specularIntensity0=float(diffuseIntensity0>0.)*getAnisotropicSpecularIntensity(nLight0,lightAttenuation);float specularIntensity1=float(diffuseIntensity1>0.)*getAnisotropicSpecularIntensity(nLight1,1.);vec4 specularComponent0=specularIntensity0*getSpecularColor(0);vec4 specularComponent1=specularIntensity1*getSpecularColor(1);vec3 color=albedo.rgb*mix(vec3(1.),ambientComponent.rgb+diffuseComponent0.rgb+diffuseComponent1.rgb,albedo.a)+specularComponent0.rgb+specularComponent1.rgb;float glow=max(max(1.-albedo.a,diffuseComponent0.a),specularComponent0.a+specularComponent1.a);glow+=trans*0.75;gl_FragData[0]=addFog(vec4(color,1.-glow),fogFactor);gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// floor.frag
"uniform int time;varying vec3 vLight0;varying vec3 vLight1;varying vec3 vvPos;uniform sampler2D mMap;vec3 nNormal;vec4 getAlbedo_tex();vec4 getAmbientColor(int i);vec4 getDiffuseColor(int i);vec4 getSpecularColor(int i);float getDiffuseIntensity(vec3 nLight);float getSpecularIntensity(vec3 nLight,float lightAttenuation);float getDistanceAttenuation(int i,vec3 vLight);float getVSMAttenuation();float getHallwayLightIntensity(){float opening=smoothstep(219000.,218000.,float(time));opening=pow(opening,2.);float coef=1.;coef*=smoothstep(180.,230.,vvPos.x);coef*=smoothstep(90.,110.,vvPos.z-opening*140.);coef*=smoothstep(210.,190.,vvPos.z);vec2 p=vec2(vvPos.z/100.-0.75,-vvPos.x/450.+0.5);coef*=texture2D(mMap,p).a;return 1.5*coef;}vec4 getBump(){vec4 albedo=getAlbedo_tex();vec3 nLight0=normalize(vLight0);vec3 nLight1=normalize(vLight1);float light0Attenuation=min(getVSMAttenuation(),getDistanceAttenuation(0,vLight0));float light1Attenuation=getDistanceAttenuation(1,vLight1);float diffuseIntensity0=light0Attenuation*getDiffuseIntensity(nLight0);float diffuseIntensity1=light1Attenuation*getDiffuseIntensity(nLight1);vec4 ambientComponent=getAmbientColor(1);vec4 diffuseComponent0=diffuseIntensity0*getDiffuseColor(0);vec4 diffuseComponent1=diffuseIntensity1*getDiffuseColor(1);vec4 diffuseComponent2=getHallwayLightIntensity()*getDiffuseColor(0);float specularIntensity0=float(diffuseIntensity0>0.)*getSpecularIntensity(nLight0,light0Attenuation);float specularIntensity1=float(diffuseIntensity1>0.)*getSpecularIntensity(nLight1,light1Attenuation);vec4 specularComponent0=specularIntensity0*getSpecularColor(0);vec4 specularComponent1=specularIntensity1*getSpecularColor(1)*0.5;vec3 color=albedo.rgb*mix(vec3(1.),ambientComponent.rgb+diffuseComponent0.rgb+diffuseComponent1.rgb+diffuseComponent2.rgb,albedo.a)+specularComponent0.rgb+specularComponent1.rgb;float glow=max(max(1.-albedo.a,diffuseComponent0.a),specularComponent0.a+specularComponent1.a);return vec4(color,1.-glow);}",
// string.vert
"#version 120\nuniform int id;uniform int time;uniform float trans;attribute vec3 vTan;varying vec3 vNormal;varying vec3 vTangent;varying vec3 vViewVec;varying vec3 vLight0;varying vec3 vLight1;varying vec4 vColor;varying vec3 vSpeed;varying float fogFactor;float getFogFactor(vec3 vVertex);vec3 getLightGlobal(int i,vec3 vVertex);vec3 getSpeed();void computeShadowCoord();const vec3 colors[12]=vec3[12](vec3(0.98,0.61,0.68),vec3(0.80,0.11,0.35),vec3(0.95,0.22,0.16),vec3(1.0,0.41,0.05),vec3(0.98,0.93,0.22),vec3(0.11,0.79,0.36),vec3(0.07,0.45,0.39),vec3(0.28,0.77,0.96),vec3(0.09,0.55,0.91),vec3(0.11,0.22,0.55),vec3(0.26,0.18,0.43),vec3(1.,1.,1.));void main(){gl_TexCoord[0]=gl_MultiTexCoord0;float t=float(time);vec4 wave=vec4(sin(30.*t),0.,cos(35.*t),0.)*pow(trans,50.)*0.1;vec3 vVertex=(gl_ModelViewMatrix*(gl_Vertex+wave)).xyz;float p=float(step(165900.,t))*pow(trans,50.);int i=id-12*(id/12);vColor.rgb=mix(vec3(1.),colors[i],p);vColor.a=1.-0.8*pow(trans,100.);computeShadowCoord();vNormal=normalize(gl_NormalMatrix*gl_Normal);vTangent=normalize(gl_NormalMatrix*vTan);vLight0=getLightGlobal(0,vVertex);vLight1=getLightGlobal(1,vVertex);vViewVec=-vVertex;fogFactor=getFogFactor(vVertex);gl_Position=gl_ModelViewProjectionMatrix*(gl_Vertex+wave);vSpeed=getSpeed();}",
// string.frag
"uniform float shininess;varying vec3 vNormal;varying vec3 vTangent;varying vec3 vLight0;varying vec3 vLight1;varying vec3 vViewVec;varying vec3 vSpeed;varying float fogFactor;varying vec4 vColor;vec2 vTexCoord;vec3 nNormal;vec3 nTangent;vec3 nViewVec;vec2 getTexCoord();vec3 getNormal();vec4 getAlbedo_tex();vec4 getAmbientColor(int i);vec4 getDiffuseColor(int i);vec4 getSpecularColor(int i);float getAnisotropicDiffuseIntensity(vec3 nLight);float getAnisotropicSpecularIntensity(vec3 nLight,float lightAttenuation);vec3 getSpeedColor(vec3 speed);float getDistanceAttenuation(int i,vec3 vLight);float getShadowAttenuation();vec4 addFog(vec4 color,float intensity);void main(){nNormal=normalize(vNormal);nTangent=normalize(vTangent);nViewVec=normalize(vViewVec);vTexCoord=getTexCoord();vec4 albedo=vColor*getAlbedo_tex();vec3 nLight0=normalize(vLight0);vec3 nLight1=normalize(vLight1);float light0Attenuation=min(getShadowAttenuation(),getDistanceAttenuation(0,vLight0));float light1Attenuation=getDistanceAttenuation(1,vLight1);float diffuseIntensity0=light0Attenuation*getAnisotropicDiffuseIntensity(nLight0);float diffuseIntensity1=light1Attenuation*getAnisotropicDiffuseIntensity(nLight1);vec4 ambientComponent=0.4*getAmbientColor(1);vec4 diffuseComponent0=0.7*diffuseIntensity0*getDiffuseColor(0);vec4 diffuseComponent1=0.4*diffuseIntensity1*getDiffuseColor(1);float specularIntensity0=float(diffuseIntensity0>0.)*getAnisotropicSpecularIntensity(nLight0,light0Attenuation);float specularIntensity1=float(diffuseIntensity1>0.)*getAnisotropicSpecularIntensity(nLight1,light1Attenuation);vec4 specularComponent0=specularIntensity0*getSpecularColor(0);vec4 specularComponent1=specularIntensity1*getSpecularColor(1);vec3 color=albedo.rgb*mix(vec3(1.),ambientComponent.rgb+diffuseComponent0.rgb+diffuseComponent1.rgb,albedo.a)+specularComponent0.rgb+specularComponent1.rgb;float glow=max(max(1.-albedo.a,diffuseComponent0.a),specularComponent0.a+specularComponent1.a);gl_FragData[0]=addFog(vec4(color,1.-glow),fogFactor);gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// xylo.frag
"#version 120\nuniform float trans;uniform int time;uniform int id;varying vec3 vViewVec;varying vec3 vSpeed;varying float fogFactor;vec2 getTexCoord();vec3 getNormal();vec2 vTexCoord;vec3 nNormal;vec3 nViewVec;vec4 getBump();vec4 addFog(vec4 color,float intensity);vec3 getSpeedColor(vec3 speed);const vec3 colors[12]=vec3[12](vec3(0.98,0.61,0.68),vec3(0.80,0.11,0.35),vec3(0.95,0.22,0.16),vec3(1.0,0.41,0.05),vec3(0.98,0.93,0.22),vec3(0.11,0.79,0.36),vec3(0.07,0.45,0.39),vec3(0.28,0.77,0.96),vec3(0.09,0.55,0.91),vec3(0.11,0.22,0.55),vec3(0.26,0.18,0.43),vec3(1.,1.,1.));vec4 getAlbedo_tex(){float glow=sin(float(time+id)/200.f)*0.125;glow=float(step(165900.,float(time)))*(0.7*trans-glow);int i=id-12*(id/12);return vec4(colors[i],1.-glow);}void main(){nViewVec=normalize(vViewVec);vTexCoord=getTexCoord();nNormal=getNormal();vec4 color=getBump();color=addFog(color,fogFactor);gl_FragData[0]=color;gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// drum.frag
"#version 120\nuniform float trans;uniform int time;uniform int id;varying vec3 vViewVec;varying vec3 vSpeed;varying float fogFactor;vec2 getTexCoord();vec3 getNormal();vec2 vTexCoord;vec3 nNormal;vec3 nViewVec;vec4 getBump();vec4 addFog(vec4 color,float intensity);vec3 getSpeedColor(vec3 speed);const vec3 colors[12]=vec3[12](vec3(0.9,0.2,0.2),vec3(0.8,0.5,0.2),vec3(0.8,0.8,0.2),vec3(0.2,0.9,0.2),vec3(0.2,0.8,0.5),vec3(0.2,0.8,0.8),vec3(0.2,0.5,0.8),vec3(0.2,0.2,0.9),vec3(0.5,0.2,0.8),vec3(0.8,0.2,0.8),vec3(0.5,0.5,0.8),vec3(0.5,0.5,0.5));vec4 getAlbedo_tex(){if(time<165900||time>216000)return vec4(1.f);vec2 p=vTexCoord;float len=length(p)-trans;float amp=min(smoothstep(0.,0.1,len),smoothstep(0.1,0.,len));amp*=pow(1.-length(p),2.);vec4 col;col.rgb=vec3(1.);col.a=mix(1.,0.,amp);return col;}void main(){nViewVec=normalize(vViewVec);vTexCoord=getTexCoord();nNormal=getNormal();vec4 color=getBump();color=addFog(color,fogFactor);gl_FragData[0]=color;gl_FragData[1]=vec4(getSpeedColor(vSpeed),1.);}",
// getAlbedo.frag
"uniform sampler2D cMap;uniform sampler2D dMap;uniform float texFade;vec2 vTexCoord;vec4 getAlbedo_white(){return vec4(1.);}vec4 getAlbedo_tex(){return texture2D(cMap,vTexCoord);}",
// make_bump.frag
"uniform int time;varying vec3 vLight0;varying vec3 vLight1;vec3 nNormal;vec4 getAlbedo_tex();vec4 getAmbientColor(int i);vec4 getDiffuseColor(int i);vec4 getSpecularColor(int i);float getDiffuseIntensity(vec3 nLight);float getSpecularIntensity(vec3 nLight,float lightAttenuation);float getDistanceAttenuation(int i,vec3 vLight);float getVSMAttenuation();vec4 getBump(){vec4 albedo=getAlbedo_tex();vec3 nLight0=normalize(vLight0);vec3 nLight1=normalize(vLight1);float light0Attenuation=min(getVSMAttenuation(),getDistanceAttenuation(0,vLight0));float light1Attenuation=getDistanceAttenuation(1,vLight1);float diffuseIntensity0=light0Attenuation*getDiffuseIntensity(nLight0);float diffuseIntensity1=light1Attenuation*getDiffuseIntensity(nLight1);vec4 ambientComponent=getAmbientColor(1);vec4 diffuseComponent0=diffuseIntensity0*getDiffuseColor(0);vec4 diffuseComponent1=diffuseIntensity1*getDiffuseColor(1);float specularIntensity0=float(diffuseIntensity0>0.)*getSpecularIntensity(nLight0,light0Attenuation);float specularIntensity1=float(diffuseIntensity1>0.)*getSpecularIntensity(nLight1,light1Attenuation);vec4 specularComponent0=specularIntensity0*getSpecularColor(0);vec4 specularComponent1=specularIntensity1*getSpecularColor(1);vec3 color=albedo.rgb*mix(vec3(1.),ambientComponent.rgb+diffuseComponent0.rgb+diffuseComponent1.rgb,albedo.a)+specularComponent0.rgb+specularComponent1.rgb;float glow=max(max(1.-albedo.a,diffuseComponent0.a),specularComponent0.a+specularComponent1.a);return vec4(color,1.-glow);}vec4 getBumpSilhouette(){vec4 albedo=getAlbedo_tex();vec3 nLight=normalize(vLight1);float lightAttenuation=1.;float diffuseIntensity=lightAttenuation*getDiffuseIntensity(nLight);vec4 diffuseComponent=getAmbientColor(0)+diffuseIntensity*getDiffuseColor(0);vec4 specularComponent=0.1*getSpecularColor(0);vec3 color=albedo.rgb*mix(vec3(1.),diffuseComponent.rgb,albedo.a)+specularComponent.rgb;float glow=0.6;return vec4(color,1.-glow);}",
// fxaa.frag
"#version 120\n#define FXAA_PC 1\n#define FXAA_GLSL_120 1\n#define Q_PRESET 13\n#define GREEN_AS_LUMA 1\n#ifndef FXAA_PC\n#define FXAA_PC 0\n#endif\n#ifndef FXAA_PC_CONSOLE\n#define FXAA_PC_CONSOLE 0\n#endif\n#ifndef FXAA_GLSL_120\n#define FXAA_GLSL_120 0\n#endif\n#ifndef FXAA_GLSL_130\n#define FXAA_GLSL_130 0\n#endif\n#ifndef GREEN_AS_LUMA\n#define GREEN_AS_LUMA 0\n#endif\n#ifndef FXAA_EARLY_EXIT\n#define FXAA_EARLY_EXIT 1\n#endif\n#ifndef FXAA_DISCARD\n#define FXAA_DISCARD 0\n#endif\n#ifndef Q_PRESET\n#define Q_PRESET 12\n#endif\n#if (Q_PRESET == 10)\n#define Q_PS 3\n#define Q_P0 1.5\n#define Q_P1 3.0\n#define Q_P2 12.0\n#endif\n#if (Q_PRESET == 11)\n#define Q_PS 4\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 3.0\n#define Q_P3 12.0\n#endif\n#if (Q_PRESET == 12)\n#define Q_PS 5\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 4.0\n#define Q_P4 12.0\n#endif\n#if (Q_PRESET == 13)\n#define Q_PS 6\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 4.0\n#define Q_P5 12.0\n#endif\n#if (Q_PRESET == 14)\n#define Q_PS 7\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 4.0\n#define Q_P6 12.0\n#endif\n#if (Q_PRESET == 15)\n#define Q_PS 8\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 4.0\n#define Q_P7 12.0\n#endif\n#if (Q_PRESET == 20)\n#define Q_PS 3\n#define Q_P0 1.5\n#define Q_P1 2.0\n#define Q_P2 8.0\n#endif\n#if (Q_PRESET == 21)\n#define Q_PS 4\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 8.0\n#endif\n#if (Q_PRESET == 22)\n#define Q_PS 5\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 8.0\n#endif\n#if (Q_PRESET == 23)\n#define Q_PS 6\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 8.0\n#endif\n#if (Q_PRESET == 24)\n#define Q_PS 7\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 3.0\n#define Q_P6 8.0\n#endif\n#if (Q_PRESET == 25)\n#define Q_PS 8\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 4.0\n#define Q_P7 8.0\n#endif\n#if (Q_PRESET == 26)\n#define Q_PS 9\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 2.0\n#define Q_P7 4.0\n#define Q_P8 8.0\n#endif\n#if (Q_PRESET == 27)\n#define Q_PS 10\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 2.0\n#define Q_P7 2.0\n#define Q_P8 4.0\n#define Q_P9 8.0\n#endif\n#if (Q_PRESET == 28)\n#define Q_PS 11\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 2.0\n#define Q_P7 2.0\n#define Q_P8 2.0\n#define Q_P9 4.0\n#define Q_P10 8.0\n#endif\n#if (Q_PRESET == 29)\n#define Q_PS 12\n#define Q_P0 1.0\n#define Q_P1 1.5\n#define Q_P2 2.0\n#define Q_P3 2.0\n#define Q_P4 2.0\n#define Q_P5 2.0\n#define Q_P6 2.0\n#define Q_P7 2.0\n#define Q_P8 2.0\n#define Q_P9 2.0\n#define Q_P10 4.0\n#define Q_P11 8.0\n#endif\n#if (Q_PRESET == 39)\n#define Q_PS 12\n#define Q_P0 1.0\n#define Q_P1 1.0\n#define Q_P2 1.0\n#define Q_P3 1.0\n#define Q_P4 1.0\n#define Q_P5 1.5\n#define Q_P6 2.0\n#define Q_P7 2.0\n#define Q_P8 2.0\n#define Q_P9 2.0\n#define Q_P10 4.0\n#define Q_P11 8.0\n#endif\n#if (FXAA_GLSL_120 == 1)\n#define TexTop(t, p) texture2DLod(t, p, 0.0)\n#define TexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n#endif\n#if (FXAA_GLSL_130 == 1)\n#define TexTop(t, p) textureLod(t, p, 0.0)\n#define TexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n#endif\n#if (GREEN_AS_LUMA == 0)\nfloat Luma(vec4 rgba){return rgba.w;}\n#else\nfloat Luma(vec4 rgba){return rgba.y;}\n#endif\n#if (FXAA_PC == 1)\nvec4 FXAA(vec2 pos,sampler2D tex,vec2 RcpFrame,float Subpix,float EdgeThreshold,float EdgeThresholdMin){vec2 posM;posM.x=pos.x;posM.y=pos.y;vec4 rgbyM=TexTop(tex,posM);\n#if (GREEN_AS_LUMA == 0)\n#define lumaM rgbyM.w\n#else\n#define lumaM rgbyM.y\n#endif\nfloat lumaS=Luma(TexOff(tex,posM,ivec2(0,1),RcpFrame));float lumaE=Luma(TexOff(tex,posM,ivec2(1,0),RcpFrame));float lumaN=Luma(TexOff(tex,posM,ivec2(0,-1),RcpFrame));float lumaW=Luma(TexOff(tex,posM,ivec2(-1,0),RcpFrame));float maxSM=max(lumaS,lumaM);float minSM=min(lumaS,lumaM);float maxESM=max(lumaE,maxSM);float minESM=min(lumaE,minSM);float maxWN=max(lumaN,lumaW);float minWN=min(lumaN,lumaW);float rangeMax=max(maxWN,maxESM);float rangeMin=min(minWN,minESM);float rangeMaxScaled=rangeMax*EdgeThreshold;float range=rangeMax-rangeMin;float rangeMaxClamped=max(EdgeThresholdMin,rangeMaxScaled);bool earlyExit=range<rangeMaxClamped;if(earlyExit)\n#if (FXAA_DISCARD == 1)\ndiscard;\n#else\nreturn rgbyM;\n#endif\nfloat lumaNW=Luma(TexOff(tex,posM,ivec2(-1,-1),RcpFrame));float lumaSE=Luma(TexOff(tex,posM,ivec2(1,1),RcpFrame));float lumaNE=Luma(TexOff(tex,posM,ivec2(1,-1),RcpFrame));float lumaSW=Luma(TexOff(tex,posM,ivec2(-1,1),RcpFrame));float lumaNS=lumaN+lumaS;float lumaWE=lumaW+lumaE;float subpixRcpRange=1.0/range;float subpixNSWE=lumaNS+lumaWE;float edgeHorz1=(-2.0*lumaM)+lumaNS;float edgeVert1=(-2.0*lumaM)+lumaWE;float lumaNESE=lumaNE+lumaSE;float lumaNWNE=lumaNW+lumaNE;float edgeHorz2=(-2.0*lumaE)+lumaNESE;float edgeVert2=(-2.0*lumaN)+lumaNWNE;float lumaNWSW=lumaNW+lumaSW;float lumaSWSE=lumaSW+lumaSE;float edgeHorz4=(abs(edgeHorz1)*2.0)+abs(edgeHorz2);float edgeVert4=(abs(edgeVert1)*2.0)+abs(edgeVert2);float edgeHorz3=(-2.0*lumaW)+lumaNWSW;float edgeVert3=(-2.0*lumaS)+lumaSWSE;float edgeHorz=abs(edgeHorz3)+edgeHorz4;float edgeVert=abs(edgeVert3)+edgeVert4;float subpixNWSWNESE=lumaNWSW+lumaNESE;float lengthSign=RcpFrame.x;bool horzSpan=edgeHorz>=edgeVert;float subpixA=subpixNSWE*2.0+subpixNWSWNESE;if(!horzSpan)lumaN=lumaW;if(!horzSpan)lumaS=lumaE;if(horzSpan)lengthSign=RcpFrame.y;float subpixB=(subpixA*(1.0/12.0))-lumaM;float gradientN=lumaN-lumaM;float gradientS=lumaS-lumaM;float lumaNN=lumaN+lumaM;float lumaSS=lumaS+lumaM;bool pairN=abs(gradientN)>=abs(gradientS);float gradient=max(abs(gradientN),abs(gradientS));if(pairN)lengthSign=-lengthSign;float subpixC=clamp(abs(subpixB)*subpixRcpRange,0.,1.);vec2 posB;posB.x=posM.x;posB.y=posM.y;vec2 offNP;offNP.x=(!horzSpan)? 0.0 : RcpFrame.x;offNP.y=(horzSpan)? 0.0 : RcpFrame.y;if(!horzSpan)posB.x+=lengthSign*0.5;if(horzSpan)posB.y+=lengthSign*0.5;vec2 posN;posN.x=posB.x-offNP.x*Q_P0;posN.y=posB.y-offNP.y*Q_P0;vec2 posP;posP.x=posB.x+offNP.x*Q_P0;posP.y=posB.y+offNP.y*Q_P0;float subpixD=((-2.0)*subpixC)+3.0;float lumaEndN=Luma(TexTop(tex,posN));float subpixE=subpixC*subpixC;float lumaEndP=Luma(TexTop(tex,posP));if(!pairN)lumaNN=lumaSS;float gradientScaled=gradient*1.0/4.0;float lumaMM=lumaM-lumaNN*0.5;float subpixF=subpixD*subpixE;bool lumaMLTZero=lumaMM<0.0;lumaEndN-=lumaNN*0.5;lumaEndP-=lumaNN*0.5;bool doneN=abs(lumaEndN)>=gradientScaled;bool doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P1;if(!doneN)posN.y-=offNP.y*Q_P1;bool doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P1;if(!doneP)posP.y+=offNP.y*Q_P1;if(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P2;if(!doneN)posN.y-=offNP.y*Q_P2;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P2;if(!doneP)posP.y+=offNP.y*Q_P2;\n#if (Q_PS > 3)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P3;if(!doneN)posN.y-=offNP.y*Q_P3;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P3;if(!doneP)posP.y+=offNP.y*Q_P3;\n#if (Q_PS > 4)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P4;if(!doneN)posN.y-=offNP.y*Q_P4;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P4;if(!doneP)posP.y+=offNP.y*Q_P4;\n#if (Q_PS > 5)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P5;if(!doneN)posN.y-=offNP.y*Q_P5;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P5;if(!doneP)posP.y+=offNP.y*Q_P5;\n#if (Q_PS > 6)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P6;if(!doneN)posN.y-=offNP.y*Q_P6;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P6;if(!doneP)posP.y+=offNP.y*Q_P6;\n#if (Q_PS > 7)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P7;if(!doneN)posN.y-=offNP.y*Q_P7;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P7;if(!doneP)posP.y+=offNP.y*Q_P7;\n#if (Q_PS > 8)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P8;if(!doneN)posN.y-=offNP.y*Q_P8;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P8;if(!doneP)posP.y+=offNP.y*Q_P8;\n#if (Q_PS > 9)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P9;if(!doneN)posN.y-=offNP.y*Q_P9;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P9;if(!doneP)posP.y+=offNP.y*Q_P9;\n#if (Q_PS > 10)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P10;if(!doneN)posN.y-=offNP.y*Q_P10;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P10;if(!doneP)posP.y+=offNP.y*Q_P10;\n#if (Q_PS > 11)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P11;if(!doneN)posN.y-=offNP.y*Q_P11;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P11;if(!doneP)posP.y+=offNP.y*Q_P11;\n#if (Q_PS > 12)\nif(doneNP){if(!doneN)lumaEndN=Luma(TexTop(tex,posN.xy));if(!doneP)lumaEndP=Luma(TexTop(tex,posP.xy));if(!doneN)lumaEndN=lumaEndN-lumaNN*0.5;if(!doneP)lumaEndP=lumaEndP-lumaNN*0.5;doneN=abs(lumaEndN)>=gradientScaled;doneP=abs(lumaEndP)>=gradientScaled;if(!doneN)posN.x-=offNP.x*Q_P12;if(!doneN)posN.y-=offNP.y*Q_P12;doneNP=(!doneN)||(!doneP);if(!doneP)posP.x+=offNP.x*Q_P12;if(!doneP)posP.y+=offNP.y*Q_P12;}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}float dstN=posM.x-posN.x;float dstP=posP.x-posM.x;if(!horzSpan)dstN=posM.y-posN.y;if(!horzSpan)dstP=posP.y-posM.y;bool goodSpanN=(lumaEndN<0.0)!=lumaMLTZero;float spanLength=(dstP+dstN);bool goodSpanP=(lumaEndP<0.0)!=lumaMLTZero;float spanLengthRcp=1.0/spanLength;bool directionN=dstN<dstP;float dst=min(dstN,dstP);bool goodSpan=directionN ? goodSpanN : goodSpanP;float subpixG=subpixF*subpixF;float pixelOffset=(dst*(-spanLengthRcp))+0.5;float subpixH=subpixG*Subpix;float pixelOffsetGood=goodSpan ? pixelOffset : 0.0;float pixelOffsetSubpix=max(pixelOffsetGood,subpixH);if(!horzSpan)posM.x+=pixelOffsetSubpix*lengthSign;if(horzSpan)posM.y+=pixelOffsetSubpix*lengthSign;\n#if (FXAA_DISCARD == 1)\nreturn TexTop(tex,posM);\n#else\nreturn vec4(TexTop(tex,posM).xyz,lumaM);\n#endif\n}\n#endif\n",
// postProcessing.vert
"void main(){gl_TexCoord[0]=gl_MultiTexCoord0;gl_Position=ftransform();}",
// noPostProcessing.frag
"uniform sampler2D cMap;void main(){gl_FragColor=texture2D(cMap,gl_TexCoord[0].xy);}",
// horizontalBlurPass.frag
"#version 120\nuniform sampler2D cMap;uniform vec2 invResolution;vec4 horizontalGaussianBlur(sampler2D tex,vec2 uv,float intensity);void main(){vec2 uv=gl_TexCoord[0].xy;gl_FragColor=horizontalGaussianBlur(cMap,uv,invResolution.x);}",
// verticalBlurPass.frag
"#version 120\nuniform sampler2D cMap;uniform vec2 invResolution;vec4 verticalGaussianBlur(sampler2D tex,vec2 uv,float intensity);void main(){vec2 uv=gl_TexCoord[0].xy;gl_FragColor=verticalGaussianBlur(cMap,uv,invResolution.y);}",
// bokehFirstPass.frag
"#version 120\nuniform sampler2D cMap;uniform sampler2D nMap;uniform vec2 invResolution;uniform float focus;uniform float zNear;uniform float zFar;uniform float skip;uniform int time;\n#define bokeh_radius 0.01\n#define bokeh_aperture 0.8\n#define N 16.\n#define NIEME (1./N)\nfloat calcCoC(float z){float depth=(2.0*zNear)/(zNear+mix(zFar,zNear,z));float c=abs((depth-focus)/focus*bokeh_aperture);return clamp(c,NIEME/8.,1.);}void main(void){vec2 sc=gl_FragCoord.xy*invResolution;vec2 ratio=vec2(1.,invResolution.y/invResolution.x);vec4 c1=vec4(0.);vec2 d1=vec2(0.,-1.)*ratio*bokeh_radius;float sum1=0.;float refDepth=texture2D(nMap,sc+d1*NIEME/10.).x;for(float i=NIEME/10.;i<1.;i+=NIEME){vec2 pc=sc+d1*i;float pdepth=texture2D(nMap,pc).x;float CoC=calcCoC(pdepth);vec4 pval=texture2D(cMap,pc);float contrib=step(i,CoC)*float(pdepth<refDepth+0.01+skip);pval.a=CoC;c1+=contrib*pval*(2.-texture2D(cMap,pc).a);sum1+=contrib;}gl_FragData[0]=c1/sum1;vec4 c2=vec4(0.);vec2 d2=vec2(0.8660254,0.5)*ratio*bokeh_radius;float sum2=0.;refDepth=texture2D(nMap,sc+d2*NIEME/10.).x;for(float i=NIEME;i<1.;i+=NIEME){vec2 pc=sc+d2*i;float pdepth=texture2D(nMap,pc).x;float CoC=calcCoC(pdepth);vec4 pval=texture2D(cMap,pc);float contrib=step(i,CoC)*float(pdepth<refDepth+0.01+skip);pval.a=CoC;c2+=contrib*pval*(2.-texture2D(cMap,pc).a);sum2+=contrib;}gl_FragData[1]=(c1+c2)/(sum1+sum2);}",
// bokehSecondPass.frag
"#version 120\nuniform sampler2D cMap;uniform sampler2D dMap;uniform sampler2D nMap;uniform vec2 invResolution;uniform float skip;\n#define bokeh_radius 0.01\n#define N 16.\n#define NIEME (1./N)\nvoid main(){vec2 sc=gl_FragCoord.xy*invResolution;vec2 ratio=vec2(1.,invResolution.y/invResolution.x);vec4 c1=vec4(0.);vec2 d1=vec2(0.8660254,0.5)*ratio*bokeh_radius;float sum1=0.;float refDepth=texture2D(nMap,sc+d1*NIEME/10.).x;for(float i=NIEME/10.;i<1.;i+=NIEME){vec2 pc=sc+d1*i;float pdepth=texture2D(nMap,pc).x;vec4 pval=texture2D(cMap,pc);float CoC=pval.a;float contrib=step(i,CoC)*float(pdepth<refDepth+0.01+skip);c1+=contrib*pval;sum1+=contrib;}vec4 c2=vec4(0.);vec2 d2=vec2(-0.8660254,0.5)*ratio*bokeh_radius;float sum2=0.;refDepth=texture2D(nMap,sc+d2*NIEME/10.).x;for(float i=NIEME;i<1.;i+=NIEME){vec2 pc=sc+d2*i;float pdepth=texture2D(nMap,pc).x;vec4 pval=texture2D(dMap,pc);float CoC=pval.a;float contrib=step(i,CoC)*float(pdepth<refDepth+0.01+skip);c2+=contrib*pval;sum2+=contrib;}gl_FragData[0]=(c1+2.*c2)/(sum1+2.*sum2);}",
// finalPass.frag
"uniform sampler2D cMap;uniform sampler2D dMap;uniform sampler2D nMap;uniform float fade;uniform float fadeLuminance;uniform int time;vec4 addBorder(vec4 color,vec2 uv,float thickness);vec4 addVignetting(vec4 color,vec2 uv);vec4 combineGlow(vec4 color,vec2 uv);vec4 grain(vec2 uv,vec4 color,int period,float freq,float intensity);vec4 motionBlur(sampler2D tex,sampler2D motion,vec2 uv,float intensity);void main(){vec2 uv=gl_TexCoord[0].xy;vec4 color=motionBlur(cMap,dMap,uv,.5);color=combineGlow(color,uv);color=grain(uv,color,60,2.,0.015);color=addVignetting(color,uv);color=addBorder(color,uv,0.015);color=mix(vec4(fadeLuminance),color,fade);gl_FragColor=color;}",
// antialiasPass.frag
"uniform sampler2D cMap;uniform vec2 invResolution;vec4 FXAA(vec2 pos,sampler2D tex,vec2 invResolution,float fxaaQualitySubpix,float fxaaQualityEdgeThreshold,float fxaaQualityEdgeThresholdMin);void main(){gl_FragColor=FXAA(gl_TexCoord[0].xy,cMap,invResolution,0.75,0.166,0.);}",
// lensOrbs.vert
"uniform sampler2D mMap;uniform vec2 center;void main(){gl_FrontColor=texture2D(mMap,gl_Vertex.xy*vec2(1.,center.y/center.x));gl_PointSize=0.5*gl_Vertex.z;gl_Position=gl_ModelViewProjectionMatrix*vec4(gl_Vertex.xy,0,gl_Vertex.w);}",
// lensOrbs.frag
"#version 120\nuniform sampler2D cMap;uniform float fade;uniform float fadeLuminance;void main(){vec4 orbs=vec4(gl_Color.rgb,pow(1.-gl_Color.a,1.5));gl_FragColor=vec4(texture2D(cMap,gl_PointCoord).a)*mix(vec4(fadeLuminance),orbs,fade);}",
// text.vert
"uniform float textStep;varying vec4 vColor;void main(){vColor=gl_Color;gl_TexCoord[0]=gl_MultiTexCoord0;gl_Position=ftransform();gl_Position.x+=0.01*textStep;}",
// text.frag
"uniform sampler2D cMap;varying vec4 vColor;vec2 getTexCoord_no_bump();void main(void){gl_FragColor=vColor;gl_FragColor.a*=texture2D(cMap,getTexCoord_no_bump()).a;}",
